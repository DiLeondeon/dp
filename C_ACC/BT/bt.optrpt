Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/1=100.0%] bt.c(55,1)
  -> EXTERN: (71,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (84,5) fclose(FILE *)
  -> EXTERN: (90,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (92,5) printf(const char *__restrict__, ...)
  -> EXTERN: (93,14) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (94,12) fgetc(FILE *)
  -> EXTERN: (94,12) fgetc(FILE *)
  -> EXTERN: (95,14) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (96,12) fgetc(FILE *)
  -> EXTERN: (96,12) fgetc(FILE *)
  -> EXTERN: (97,14) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (99,5) fclose(FILE *)
  -> EXTERN: (101,5) printf(const char *__restrict__, ...)
  -> EXTERN: (109,3) printf(const char *__restrict__, ...)
  -> EXTERN: (111,3) printf(const char *__restrict__, ...)
  -> EXTERN: (112,3) printf(const char *__restrict__, ...)
  -> EXTERN: (117,5) printf(const char *__restrict__, ...)
  -> EXTERN: (118,5) printf(const char *__restrict__, ...)
  -> EXTERN: (122,3) set_constants()
  -> EXTERN: (125,5) timer_clear(int)
  -> EXTERN: (128,3) initialize()
  -> EXTERN: (130,3) exact_rhs()
  -> EXTERN: (135,3) adi()
  -> EXTERN: (136,3) initialize()
  -> EXTERN: (139,5) timer_clear(int)
  -> EXTERN: (141,3) timer_start(int)
  -> EXTERN: (145,7) printf(const char *__restrict__, ...)
  -> EXTERN: (148,5) adi()
  -> EXTERN: (151,3) timer_stop(int)
  -> EXTERN: (152,10) timer_read(int)
  -> EXTERN: (154,3) verify(int, char *, logical *)
  -> EXTERN: (165,3) print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *)
  -> EXTERN: (176,18) timer_read(int)
  -> EXTERN: (180,5) printf(const char *__restrict__, ...)
  -> EXTERN: (182,7) printf(const char *__restrict__, ...)
  -> EXTERN: (186,9) printf(const char *__restrict__, ...)
  -> EXTERN: (188,9) printf(const char *__restrict__, ...)
  -> EXTERN: (191,9) printf(const char *__restrict__, ...)
  -> EXTERN: (194,9) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at bt.c(94,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bt.c(96,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bt.c(124,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function timer_clear(int) cannot be vectorized   [ bt.c(125,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at bt.c(138,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function timer_clear(int) cannot be vectorized   [ bt.c(139,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at bt.c(143,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable step was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bt.c(175,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function timer_read(int) cannot be vectorized   [ bt.c(176,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at bt.c(181,5)
<Predicate Optimized v1>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #25423: Condition at line 184 hoisted out of this loop
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(182,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(191,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(194,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at bt.c(181,5)
<Predicate Optimized v3>
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(182,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(191,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ bt.c(194,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 6  
LOOP END

    Report from: Code generation optimizations [cg]

bt.c(55,1):remark #34051: REGISTER ALLOCATION : [main] bt.c:55

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r9 r12-r13 zmm0-zmm4]
        
    Routine temporaries
        Total         :     304
            Global    :      52
            Local     :     252
        Regenerable   :     118
        Spilled       :       6
        
    Routine stack
        Variables     :     205 bytes*
            Reads     :      34 [1.93e+00 ~ 1.9%]
            Writes    :      15 [4.88e+00 ~ 4.9%]
        Spills        :      40 bytes*
            Reads     :      19 [1.28e+00 ~ 1.3%]
            Writes    :       6 [7.15e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
