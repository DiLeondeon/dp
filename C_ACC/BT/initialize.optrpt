Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: initialize()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialize()) [1/2=50.0%] initialize.c(8,1)
  -> EXTERN: (45,11) exact_solution(double, double, double, double *)
  -> EXTERN: (49,11) exact_solution(double, double, double, double *)
  -> EXTERN: (53,11) exact_solution(double, double, double, double *)
  -> EXTERN: (84,7) exact_solution(double, double, double, double *)
  -> EXTERN: (102,7) exact_solution(double, double, double, double *)
  -> EXTERN: (120,7) exact_solution(double, double, double, double *)
  -> EXTERN: (138,7) exact_solution(double, double, double, double *)
  -> EXTERN: (156,7) exact_solution(double, double, double, double *)
  -> EXTERN: (174,7) exact_solution(double, double, double, double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at initialize.c(22,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at initialize.c(23,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=65

      LOOP BEGIN at initialize.c(24,7)
         remark #25420: Collapsed with loop at line 25 
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ initialize.c(26,11) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at initialize.c(25,9)
            remark #25421: Loop eliminated in Collapsing 

         LOOP END
      LOOP END

      LOOP BEGIN at initialize.c(24,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=5
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(37,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(39,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(41,7)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at initialize.c(44,9)
            remark #17104: loop was not parallelized: existence of parallel dependence
            remark #15382: vectorization support: call to function exact_solution(double, double, double, double *) cannot be vectorized   [ initialize.c(45,11) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
         LOOP END

         LOOP BEGIN at initialize.c(48,9)
            remark #17104: loop was not parallelized: existence of parallel dependence
            remark #15382: vectorization support: call to function exact_solution(double, double, double, double *) cannot be vectorized   [ initialize.c(49,11) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
         LOOP END

         LOOP BEGIN at initialize.c(52,9)
            remark #17104: loop was not parallelized: existence of parallel dependence
            remark #15382: vectorization support: call to function exact_solution(double, double, double, double *) cannot be vectorized   [ initialize.c(53,11) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
         LOOP END

         LOOP BEGIN at initialize.c(56,9)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference Pface[1][0][m] has unaligned access   [ initialize.c(57,26) ]
            remark #15388: vectorization support: reference Pface[0][0][m] has aligned access   [ initialize.c(57,56) ]
            remark #15388: vectorization support: reference Pface[1][1][m] has aligned access   [ initialize.c(58,26) ]
            remark #15389: vectorization support: reference Pface[0][1][m] has unaligned access   [ initialize.c(58,56) ]
            remark #15389: vectorization support: reference Pface[1][2][m] has unaligned access   [ initialize.c(59,26) ]
            remark #15388: vectorization support: reference Pface[0][2][m] has aligned access   [ initialize.c(59,56) ]
            remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ initialize.c(61,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.397
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 71 
            remark #15477: vector cost: 34.000 
            remark #15478: estimated potential speedup: 1.510 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2
         LOOP END

         LOOP BEGIN at initialize.c(56,9)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(80,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(82,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(85,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][j][0][m] has unaligned access   [ initialize.c(86,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(86,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(85,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(98,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(100,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(103,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ initialize.c(104,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(104,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(103,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(116,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(118,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(121,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][0][i][m] has unaligned access   [ initialize.c(122,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(122,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(121,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(134,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(136,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(139,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ initialize.c(140,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(140,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(139,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(152,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(154,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(157,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[0][j][i][m] has unaligned access   [ initialize.c(158,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(158,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(157,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(170,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at initialize.c(172,5)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at initialize.c(175,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ initialize.c(176,9) ]
         remark #15388: vectorization support: reference temp[m] has aligned access   [ initialize.c(176,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at initialize.c(175,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

initialize.c(8,1):remark #34051: REGISTER ALLOCATION : [initialize] initialize.c:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     260
            Global    :      92
            Local     :     168
        Regenerable   :      27
        Spilled       :      23
        
    Routine stack
        Variables     :     280 bytes*
            Reads     :      30 [1.16e+01 ~ 11.6%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     184 bytes*
            Reads     :      41 [7.89e+00 ~ 7.9%]
            Writes    :      19 [1.73e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: lhsinit(double (*)[3][5][5], int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (lhsinit(double (*)[3][5][5], int)) [2/2=100.0%] initialize.c(185,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at initialize.c(193,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=5

   LOOP BEGIN at initialize.c(194,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at initialize.c(194,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference lhs[0][0][n][m] has aligned access   [ initialize.c(195,7) ]
      remark #15389: vectorization support: reference lhs[0][1][n][m] has unaligned access   [ initialize.c(196,7) ]
      remark #15388: vectorization support: reference lhs[0][2][n][m] has aligned access   [ initialize.c(197,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.455
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 1.270 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at initialize.c(194,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=5
   LOOP END
LOOP END

LOOP BEGIN at initialize.c(202,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=5

   LOOP BEGIN at initialize.c(203,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at initialize.c(203,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference lhs[ni][0][n][m] has aligned access   [ initialize.c(204,7) ]
      remark #15389: vectorization support: reference lhs[ni][1][n][m] has unaligned access   [ initialize.c(205,7) ]
      remark #15388: vectorization support: reference lhs[ni][2][n][m] has aligned access   [ initialize.c(206,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.455
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 1.270 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at initialize.c(203,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=5
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

initialize.c(185,1):remark #34051: REGISTER ALLOCATION : [lhsinit] initialize.c:185

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbp rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      54
            Global    :      32
            Local     :      22
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
