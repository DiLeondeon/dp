Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: verify(int, char *, logical *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (verify(int, char *, logical *)) [1/1=100.0%] verify.c(9,1)
  -> EXTERN: (22,3) error_norm(double *)
  -> EXTERN: (23,3) compute_rhs()
  -> EXTERN: (25,3) rhs_norm(double *)
  -> EXTERN: (253,5) printf(const char *__restrict__, ...)
  -> EXTERN: (254,5) printf(const char *__restrict__, ...)
  -> EXTERN: (258,7) printf(const char *__restrict__, ...)
  -> EXTERN: (261,5) printf(const char *__restrict__, ...)
  -> EXTERN: (265,5) printf(const char *__restrict__, ...)
  -> EXTERN: (267,5) printf(const char *__restrict__, ...)
  -> EXTERN: (272,7) printf(const char *__restrict__, ...)
  -> EXTERN: (274,7) printf(const char *__restrict__, ...)
  -> EXTERN: (278,7) printf(const char *__restrict__, ...)
  -> EXTERN: (284,5) printf(const char *__restrict__, ...)
  -> EXTERN: (286,5) printf(const char *__restrict__, ...)
  -> EXTERN: (291,7) printf(const char *__restrict__, ...)
  -> EXTERN: (293,7) printf(const char *__restrict__, ...)
  -> EXTERN: (297,7) printf(const char *__restrict__, ...)
  -> EXTERN: (303,5) printf(const char *__restrict__, ...)
  -> EXTERN: (304,5) printf(const char *__restrict__, ...)
  -> EXTERN: (306,5) printf(const char *__restrict__, ...)
  -> EXTERN: (308,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at verify.c(27,3)
   remark #25045: Fused Loops: ( 27 34 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference xcr[m] has aligned access   [ verify.c(28,5) ]
   remark #15388: vectorization support: reference xcr[m] has aligned access   [ verify.c(28,14) ]
   remark #15388: vectorization support: reference xcrref[m] has aligned access   [ verify.c(35,5) ]
   remark #15388: vectorization support: reference xceref[m] has aligned access   [ verify.c(36,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.024
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 37 
   remark #15477: vector cost: 20.500 
   remark #15478: estimated potential speedup: 1.520 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at verify.c(34,3)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at verify.c(27,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at verify.c(244,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference xcrdif[m] has aligned access   [ verify.c(245,5) ]
   remark #15388: vectorization support: reference xcr[m] has aligned access   [ verify.c(245,23) ]
   remark #15388: vectorization support: reference xcrref[m] has aligned access   [ verify.c(245,30) ]
   remark #15388: vectorization support: reference xcrref[m] has aligned access   [ verify.c(245,41) ]
   remark #15388: vectorization support: reference xcedif[m] has aligned access   [ verify.c(246,5) ]
   remark #15388: vectorization support: reference xce[m] has aligned access   [ verify.c(246,23) ]
   remark #15388: vectorization support: reference xceref[m] has aligned access   [ verify.c(246,30) ]
   remark #15388: vectorization support: reference xceref[m] has aligned access   [ verify.c(246,41) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 74 
   remark #15477: vector cost: 50.000 
   remark #15478: estimated potential speedup: 1.350 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at verify.c(270,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(272,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(274,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(278,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at verify.c(289,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(291,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(293,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ verify.c(297,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at verify.c(244,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

verify.c(9,1):remark #34051: REGISTER ALLOCATION : [verify] verify.c:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r12 zmm0-zmm10]
        
    Routine temporaries
        Total         :     413
            Global    :      26
            Local     :     387
        Regenerable   :     221
        Spilled       :       4
        
    Routine stack
        Variables     :     240 bytes*
            Reads     :      72 [1.57e+01 ~ 15.7%]
            Writes    :     127 [5.90e+00 ~ 5.9%]
        Spills        :       8 bytes*
            Reads     :       2 [3.94e-01 ~ 0.4%]
            Writes    :       8 [3.86e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
