Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: matvec_sub(double (*)[5], double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matvec_sub(double (*)[5], double *, double *)) [1/4=25.0%] solve_subs.c(2,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solve_subs.c(7,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between bvec[_2] (7:3) and *avec (7:3)
   remark #17106: parallel dependence: assumed ANTI dependence between *avec (7:3) and bvec[_2] (7:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between bvec[_2] (7:3) and *avec (7:3)
   remark #15346: vector dependence: assumed ANTI dependence between *avec (7:3) and bvec[_2] (7:3)
   remark #25436: completely unrolled by 5  
LOOP END

    Report from: Code generation optimizations [cg]

solve_subs.c(2,1):remark #34051: REGISTER ALLOCATION : [matvec_sub] solve_subs.c:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rdx rsi rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :      92
            Global    :       0
            Local     :      92
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matmul_sub(double (*)[5], double (*)[5], double (*)[5])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matmul_sub(double (*)[5], double (*)[5], double (*)[5])) [2/4=50.0%] solve_subs.c(39,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solve_subs.c(40,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between cblock[_2] (40:3) and bblock[0] (40:3)
   remark #17106: parallel dependence: assumed ANTI dependence between bblock[0] (40:3) and cblock[_2] (40:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cblock[_2] (40:3) and bblock[0] (40:3)
   remark #15346: vector dependence: assumed ANTI dependence between bblock[0] (40:3) and cblock[_2] (40:3)
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at solve_subs.c(65,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between cblock[1][_2] (65:3) and bblock[1][0] (65:3)
   remark #17106: parallel dependence: assumed ANTI dependence between bblock[1][0] (65:3) and cblock[1][_2] (65:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cblock[1][_2] (65:3) and bblock[1][0] (65:3)
   remark #15346: vector dependence: assumed ANTI dependence between bblock[1][0] (65:3) and cblock[1][_2] (65:3)
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at solve_subs.c(90,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between cblock[2][_2] (90:3) and bblock[2][0] (90:3)
   remark #17106: parallel dependence: assumed ANTI dependence between bblock[2][0] (90:3) and cblock[2][_2] (90:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cblock[2][_2] (90:3) and bblock[2][0] (90:3)
   remark #15346: vector dependence: assumed ANTI dependence between bblock[2][0] (90:3) and cblock[2][_2] (90:3)
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at solve_subs.c(115,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between cblock[3][_2] (115:3) and bblock[3][0] (115:3)
   remark #17106: parallel dependence: assumed ANTI dependence between bblock[3][0] (115:3) and cblock[3][_2] (115:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cblock[3][_2] (115:3) and bblock[3][0] (115:3)
   remark #15346: vector dependence: assumed ANTI dependence between bblock[3][0] (115:3) and cblock[3][_2] (115:3)
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at solve_subs.c(140,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between cblock[4][_2] (140:3) and bblock[4][0] (140:3)
   remark #17106: parallel dependence: assumed ANTI dependence between bblock[4][0] (140:3) and cblock[4][_2] (140:3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between cblock[4][_2] (140:3) and bblock[4][0] (140:3)
   remark #15346: vector dependence: assumed ANTI dependence between bblock[4][0] (140:3) and cblock[4][_2] (140:3)
   remark #25436: completely unrolled by 5  
LOOP END

    Report from: Code generation optimizations [cg]

solve_subs.c(39,1):remark #34051: REGISTER ALLOCATION : [matmul_sub] solve_subs.c:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rdx rsi rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :     413
            Global    :      11
            Local     :     402
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: binvcrhs(double (*)[5], double (*)[5], double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (binvcrhs(double (*)[5], double (*)[5], double *)) [3/4=75.0%] solve_subs.c(169,1)


    Report from: Code generation optimizations [cg]

solve_subs.c(169,1):remark #34051: REGISTER ALLOCATION : [binvcrhs] solve_subs.c:169

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rdx rsi rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :     758
            Global    :      14
            Local     :     744
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: binvrhs(double (*)[5], double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (binvrhs(double (*)[5], double *)) [4/4=100.0%] solve_subs.c(429,1)


    Report from: Code generation optimizations [cg]

solve_subs.c(429,1):remark #34051: REGISTER ALLOCATION : [binvrhs] solve_subs.c:429

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rsi rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :     299
            Global    :       0
            Local     :     299
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
