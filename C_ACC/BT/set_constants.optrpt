Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: set_constants()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set_constants()) [1/1=100.0%] set_constants.c(4,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at set_constants.c(5,3)
   remark #25399: memcopy generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at set_constants.c(19,3)
   remark #25399: memcopy generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at set_constants.c(33,3)
   remark #25399: memcopy generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at set_constants.c(47,3)
   remark #25399: memcopy generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at set_constants.c(61,3)
   remark #25399: memcopy generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

    Report from: Code generation optimizations [cg]

set_constants.c(5,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
set_constants.c(5,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
set_constants.c(19,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
set_constants.c(19,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
set_constants.c(33,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
set_constants.c(33,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
set_constants.c(47,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
set_constants.c(47,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
set_constants.c(61,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
set_constants.c(61,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
set_constants.c(4,1):remark #34051: REGISTER ALLOCATION : [set_constants] set_constants.c:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     131
            Global    :       6
            Local     :     125
        Regenerable   :      52
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
