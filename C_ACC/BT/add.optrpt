Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.8.0 Build 20221119_000000

Compiler options: -I../common -c -g -Wall -O3 -parallel -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: add()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (add()) [1/1=100.0%] add.c(8,1)
  -> EXTERN: (11,16) timer_start(int)
  -> EXTERN: (22,16) timer_stop(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at add.c(13,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ .2 } private={ } firstprivate={ j i m k } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <u[k][j][i][m]>, stride is 21125   [ add.c(17,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <u[k][j][i][m]>, stride is 21125   [ add.c(17,27) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <rhs[k][j][i][m]>, stride is 21125   [ add.c(17,43) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at add.c(14,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u[k][j][i][m]>, stride is 325   [ add.c(17,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u[k][j][i][m]>, stride is 325   [ add.c(17,27) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <rhs[k][j][i][m]>, stride is 325   [ add.c(17,43) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.920 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=65

      LOOP BEGIN at add.c(15,7)
         remark #25420: Collapsed with loop at line 16 
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ add.c(17,11) ]
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ add.c(17,27) ]
         remark #15389: vectorization support: reference rhs[k][j][i][m] has unaligned access   [ add.c(17,43) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.900 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 8  
         remark #25015: Estimate of max trip count of loop=5

         LOOP BEGIN at add.c(16,9)
            remark #25421: Loop eliminated in Collapsing 

         LOOP END
      LOOP END

      LOOP BEGIN at add.c(15,7)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at add.c(13,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <u[k][j][i][m]>, stride is 21125   [ add.c(17,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <u[k][j][i][m]>, stride is 21125   [ add.c(17,27) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <rhs[k][j][i][m]>, stride is 21125   [ add.c(17,43) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at add.c(14,5)
      remark #17107: loop was not parallelized: inner loop
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u[k][j][i][m]>, stride is 325   [ add.c(17,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u[k][j][i][m]>, stride is 325   [ add.c(17,27) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <rhs[k][j][i][m]>, stride is 325   [ add.c(17,43) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.920 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=65

      LOOP BEGIN at add.c(15,7)
         remark #17107: loop was not parallelized: inner loop
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ add.c(17,11) ]
         remark #15389: vectorization support: reference u[k][j][i][m] has unaligned access   [ add.c(17,27) ]
         remark #15389: vectorization support: reference rhs[k][j][i][m] has unaligned access   [ add.c(17,43) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.900 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 8  
         remark #25015: Estimate of max trip count of loop=5
      LOOP END

      LOOP BEGIN at add.c(15,7)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

add.c(8,1):remark #34051: REGISTER ALLOCATION : [add] add.c:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     222
            Global    :      45
            Local     :     177
        Regenerable   :      42
        Spilled       :       1
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       2 [1.58e-03 ~ 0.0%]
            Writes    :      12 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      13 [8.23e-05 ~ 0.0%]
            Writes    :      13 [8.23e-05 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
